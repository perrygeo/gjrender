#!/usr/bin/env python
import mapnik
import click


def render_map_from_features(features, output, height=600, width=1200, bbox=None):
    m = mapnik.Map(width, height)
    m.background = mapnik.Color('white')

    s = mapnik.Style()
    r = mapnik.Rule()
    polygon_symbolizer = mapnik.PolygonSymbolizer()
    r.symbols.append(polygon_symbolizer)
    line_symbolizer = mapnik.LineSymbolizer()
    r.symbols.append(line_symbolizer)
    s.rules.append(r)
    m.append_style('Poly Style', s)

    s = mapnik.Style()
    r = mapnik.Rule()
    line_symbolizer = mapnik.LineSymbolizer()
    r.symbols.append(line_symbolizer)
    s.rules.append(r)
    m.append_style('Line Style', s)

    s = mapnik.Style()
    r = mapnik.Rule()
    point_symbolizer = mapnik.PointSymbolizer()
    r.symbols.append(point_symbolizer)
    s.rules.append(r)
    m.append_style('Point Style', s)

    point_ds = mapnik.MemoryDatasource()
    line_ds = mapnik.MemoryDatasource()
    poly_ds = mapnik.MemoryDatasource()
    ctx = mapnik.Context()
    for feature in features:
        feat = mapnik.Feature.from_geojson(feature, ctx)
        if (feat.geometry.type() == mapnik._mapnik.GeometryType.Polygon or
            feat.geometry.type() == mapnik._mapnik.GeometryType.MultiPolygon):
            poly_ds.add_feature(feat)
        elif (feat.geometry.type() == mapnik._mapnik.GeometryType.LineString or
              feat.geometry.type() == mapnik._mapnik.GeometryType.MultiLineString):
            line_ds.add_feature(feat)
        elif (feat.geometry.type() == mapnik._mapnik.GeometryType.Point or
              feat.geometry.type() == mapnik._mapnik.GeometryType.Point):
            point_ds.add_feature(feat)
        else:
            raise Exception("Unsupported Geometry Type")

    poly_layer = mapnik.Layer('world')
    poly_layer.datasource = poly_ds
    poly_layer.styles.append('Poly Style')
    m.layers.append(poly_layer)

    point_layer = mapnik.Layer('world')
    point_layer.datasource = point_ds
    point_layer.styles.append('Point Style')
    m.layers.append(point_layer)

    line_layer = mapnik.Layer('world')
    line_layer.datasource = line_ds
    line_layer.styles.append('Line Style')
    m.layers.append(line_layer)

    m.zoom_all()
    mapnik.render_to_file(m, output, 'png')


@click.command()
@click.argument('output-png')
def geojson_render(output_png):
    """Render features from stdin to png using basic styling"""
    stdin = click.get_text_stream('stdin')
    features = (str(x) for x in stdin)
    render_map_from_features(features, output_png)


if __name__ == '__main__':
    geojson_render()
